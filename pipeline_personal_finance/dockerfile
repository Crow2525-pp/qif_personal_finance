# Use an official Python runtime as a parent image
FROM python:3.11

# Set the working directory in the Docker image
WORKDIR /docker/appdata/dagster/pipeline_personal_finance

# Copy the application code to the working directory
COPY . .

# Install the required dependencies
RUN pip install poetry && \
    echo "Poetry version:" && \
    poetry --version && \

# Debug: List the contents of the working directory
RUN echo "Listing contents of /docker/appdata/dagster/pipeline_personal_finance:" && \
    ls -la /docker/appdata/dagster/pipeline_personal_finance && \

# Run poetry lock and check its success
RUN poetry lock && \
    echo "Poetry lock completed successfully" && \

# Install project dependencies
RUN poetry install --no-root && \
    echo "Poetry install completed successfully" && \

# Debug: List installed packages
RUN echo "Listing installed packages:" && \
    poetry show && \

# Set the full project directory path for dbt commands
RUN poetry run dbt clean --project-dir pipeline_personal_finance/dbt_finance/ --profiles-dir pipeline_personal_finance/dbt_finance/ && \
    echo "DBT clean completed successfully" && \

RUN poetry run dbt deps --project-dir pipeline_personal_finance/dbt_finance/ --profiles-dir pipeline_personal_finance/dbt_finance/ && \
    echo "DBT deps completed successfully" && \

RUN poetry run dbt build --project-dir pipeline_personal_finance/dbt_finance/ --profiles-dir pipeline_personal_finance/dbt_finance/ && \
    echo "DBT build completed successfully" && \


# Debug: List the contents of the dbt project directory
RUN echo "Listing contents of pipeline_personal_finance/dbt_finance:" && \
    ls -la pipeline_personal_finance/dbt_finance && \


# Set the working directory to where the service needs to be started from
WORKDIR /docker/appdata/dagster

# Expose the port that Dagster gRPC server uses
EXPOSE 4000

# Command to run the Dagster gRPC server
CMD ["dagster", "api", "grpc", "-h", "0.0.0.0", "-p", "4000", "-m", "pipeline_personal_finance"]