# Use an official Python runtime as a parent image
FROM ghcr.io/astral-sh/uv:python3.11-bookworm-slim

ARG DAGSTER_APP


ENV YOUR_ENV=${YOUR_ENV} \
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  # Copy from the cache instead of linking since it's a mounted volume
  UV_LINK_MODE=copy \ 
  # Enable bytecode compilation
  UV_COMPILE_BYTECODE=1 \ 
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  PATH="/.venv/bin:$PATH" \
  
  # Make sure to update it!
  DAGSTER_APP=${DAGSTER_APP:-appnotset}

# Set the working directory in the Docker image

# Install the required dependencies
# Explicitly copy files into the container
RUN ls -l

COPY uv.lock uv.lock
COPY pyproject.toml pyproject.toml
COPY pipeline_personal_finance/pyproject.toml pipeline_personal_finance/pyproject.toml

# Install the project's dependencies using the lockfile and settings
RUN --mount=type=cache,target=/root/.cache/uv \

    uv sync --frozen --no-install-project


COPY pipeline_personal_finance/* .
    
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

# Reset the entrypoint, don't invoke `uv`
ENTRYPOINT []

# Copy the application code to the working directory

# Set the working directory to dbt dir to build the script
WORKDIR ${DAGSTER_APP}/pipeline_personal_finance/dbt_finance

# Set the full project directory path for dbt commands
# RUN uv run dbt clean
RUN dbt deps

# Set the working directory to where the service needs to be started from
WORKDIR ${DAGSTER_APP}

# Expose the port that Dagster gRPC server uses
EXPOSE 4000

RUN chmod -R +x ${DAGSTER_APP}


# Command to run the Dagster gRPC server
CMD ["dagster", "api", "grpc", "-h", "0.0.0.0", "-p", "4000", "-m", "pipeline_personal_finance"]
